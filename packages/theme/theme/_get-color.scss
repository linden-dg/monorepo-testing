@use "sass:math";
@use "utils/functions" as fn;
@use "utils/css-var_fn" as cv;
@use "config/colors" as theme;

/// Returns the color value for a given color name and group.
///
/// @param {String} $color - The name of the color in the palette.
/// @param {String} $tone - The darkness/lightness of the color.
//          Defaults to 500.
//  @param {Int} $alpha - The transparency (alpha) of the color
/// @output {Color} The color value.

@function getColor($color, $tone: 500, $alpha: false) {
  // force to variables to string
  $colorKey: "#{$color}";

  @if $colorKey == "grey" {
    $colorKey: "gray";
  }
  $toneKey: "#{$tone}";

  @if map-has-key(theme.$color-palettes, $colorKey) {
    @if $colorKey != "text" {
      $toneKey2: fn.deep-get(theme.$toneMap, $toneKey);
      $hue: fn.deep-get(theme.$color-palettes, $colorKey, $toneKey2);

      @return cv.get-var(
        colors,
        "#{$colorKey}#{fn.capitalize($toneKey2)}",
        $hue
      );
    } @else {
      //Text uses non-standard keys

      @if $tone == 500 or $tone == "base" {
        $hue: fn.deep-get(theme.$color-palettes, $colorKey, "base");
        @return cv.get-var(colors, "#{$colorKey}", $hue);
      }

      $hue: fn.deep-get(theme.$color-palettes, $colorKey, $toneKey);
      @return cv.get-var(
        colors,
        "#{$colorKey}#{fn.capitalize($toneKey)}",
        $hue
      );
    }
  } @else {
    $hue: fn.deep-get(theme.$common-colors, $colorKey);
    @return cv.get-var(colors, $colorKey, $hue);
  }

  @warn "color `#{$color}`,  tone `#{$tone}`";
  @warn "unknown color `#{$color}` in palette";
  @return null;
}
